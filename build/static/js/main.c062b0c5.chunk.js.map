{"version":3,"sources":["i18n.js","components/Layout/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["i18n","use","XHR","LanguageDetector","initReactI18next","init","resources","en","languageEN","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","detection","order","react","wait","bindI18n","bindStore","nsMode","useSuspense","Topbar","React","lazy","FooterWithoutMenuLightSocialOnly","Layout","Loader","id","className","I18nextProvider","Fragment","fallback","this","hasDarkTopBar","props","children","Component","withTranslation","withRouter","routes","path","component","isWithoutLayout","App","map","route","idx","exact","WrappedComponent","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c062b0c5.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport LanguageDetector from \"i18next-browser-languagedetector\"\nimport {initReactI18next} from 'react-i18next'\nimport XHR from 'i18next-xhr-backend'\nimport languageEN from './locate/en/translate.json'\n\ni18n\n.use(XHR)\n.use(LanguageDetector)\n.use(initReactI18next)\n.init({\n    resources: {\n        en: languageEN\n    },\n    // /* default language when load the website in browser */\n    // lng: \"en\",\n    /* When react i18next not finding any language to as default in browser */\n    fallbackLng: \"en\",\n    /* debugger For Development environment */\n    debug: true,\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n    keySeparator: \".\",\n    interpolation: {\n        escapeValue: false,\n        formatSeparator: \",\"\n    },\n    detection: {\n        order: ['path', 'navigator']\n      },\n    react: {\n        wait: true,\n        bindI18n: 'languageChanged loaded',\n        bindStore: 'added removed',\n        nsMode: 'default',\n        useSuspense: false    \n    }\n})\n\nexport default i18n;","import React, { Component, Suspense } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { withTranslation } from 'react-i18next';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './../../i18n'\n\nconst Topbar = React.lazy(() => import(\"./Topbar\"));\nconst FooterWithoutMenuLightSocialOnly = React.lazy(() =>\n  import(\"./FooterWithoutMenuLightSocialOnly\")\n);\n\nclass Layout extends Component {\n  Loader = () => {\n    return (\n      <div id=\"preloader\">\n        <div id=\"status\">\n          <div className=\"spinner\">\n            <div className=\"double-bounce1\"></div>\n            <div className=\"double-bounce2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <I18nextProvider i18n={i18n}>\n      <React.Fragment>\n        <Suspense fallback={this.Loader()}>\n          <Topbar hasDarkTopBar={this.props.hasDarkTopBar} />\n          {this.props.children}\n          <FooterWithoutMenuLightSocialOnly className=\"border-0 bg-light text-dark\" />\n        </Suspense>\n      </React.Fragment>\n      </I18nextProvider>\n    );\n  }\n}\n\nexport default withTranslation()(withRouter(Layout));\n","import React from \"react\";\r\n\r\nconst PageError = React.lazy(() => import(\"./pages/Pages/Special/PageError\"));\r\nconst PageThankYou = React.lazy(() => import(\"./pages/Pages/Special/PageThankYou\"));\r\nconst Main = React.lazy(() => import(\"./pages/Main/index\"));\r\n\r\nconst RemoteExpert = React.lazy(() => import(\"./pages/Features/RemoteExpert/index\"));\r\nconst ClientService = React.lazy(() => import(\"./pages/Features/ClientService/index\"));\r\nconst LocationTracking = React.lazy(() => import(\"./pages/Features/LocationTracking/index\"));\r\nconst OnlineTimesheet = React.lazy(() => import(\"./pages/Features/OnlineTimesheet/index\"));\r\nconst TagsTracking = React.lazy(() => import(\"./pages/Features/TagsTracking/index\"));\r\nconst TimeTracking = React.lazy(() => import(\"./pages/Features/TimeTracking/index\"));\r\nconst Industries = React.lazy(() => import(\"./pages/Industries/Common/index\"));\r\n\r\nconst Glasses = React.lazy(() => import(\"./pages/SmartGlasses/index\"));\r\n\r\nconst Pricing = React.lazy(() => import(\"./pages/Pricing/index\"));\r\n\r\nconst routes = [\r\n  { path: \"/page-error\", component: PageError, isWithoutLayout: true },\r\n  { path: \"/page-thankyou\", component: PageThankYou, isWithoutLayout: true },\r\n\r\n  { path: \"/\", component: Main },\r\n\r\n  { path: \"/features/remote-expert\", component: RemoteExpert },\r\n  { path: \"/features/client-service-control\", component: ClientService },\r\n  { path: \"/features/location-tracking\", component: LocationTracking },\r\n  { path: \"/features/online-timesheet\", component: OnlineTimesheet },\r\n  { path: \"/features/tags-tracking\", component: TagsTracking },\r\n  { path: \"/features/time-tracking\", component: TimeTracking },\r\n  { path: \"/industries/inpres-industries\", component: Industries },\r\n\r\n  { path: \"/inpres-glasses\", component: Glasses },\r\n\r\n  { path: \"/pricing\", component: Pricing }\r\n\r\n  \r\n];\r\n\r\nexport default routes;\r\n","import React, { Component, Suspense } from \"react\";\nimport Layout from \"./components/Layout/\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  withRouter,\n} from \"react-router-dom\";\nimport { withTranslation } from 'react-i18next'\n\n// Import Css\nimport \"./assets/css/materialdesignicons.min.css\";\nimport \"./Apps.scss\";\n\nimport \"./assets/css/colors/default.css\";\n\n// Include Routes\nimport routes from \"./routes\";\n\nfunction withLayout(WrappedComponent, hasDarkTopBar) {\n  // ...and returns another component...\n  return class extends React.Component {\n    render() {\n      return (\n        <Layout hasDarkTopBar={hasDarkTopBar}>\n          <WrappedComponent></WrappedComponent>\n        </Layout>\n      );\n    }\n  };\n}\n\nclass App extends Component {\n  Loader = () => {\n    return (\n      <div id=\"preloader\">\n        <div id=\"status\">\n          <div className=\"spinner\">\n            <div className=\"double-bounce1\"></div>\n            <div className=\"double-bounce2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <Suspense fallback={this.Loader()}>\n            <Switch>\n              {routes.map((route, idx) =>\n                route.isWithoutLayout ? (\n                  <Route\n                    path={route.path}\n                    exact={route.exact}\n                    component={route.component}\n                    key={idx}\n                  />\n                ) : (\n                  <Route\n                    path={route.path}\n                    exact\n                    component={withLayout(route.component)}\n                    key={idx}\n                  />\n                )\n              )}\n            </Switch>\n          </Suspense>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default withTranslation()(withRouter(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n'\n\nconst app = (\n  <I18nextProvider i18n={i18n}>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  </I18nextProvider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}